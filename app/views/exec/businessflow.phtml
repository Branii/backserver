<?php
// declare(strict_types=1);
// header('Content-Type: application/json');
   ini_set('display_errors', 1);

$flag = isset($this->viewData['flag']) ? $this->viewData['flag'] : null;
// function formatBalance($balance){
//    if (fmod($balance, 1) != 0 && strlen(explode('.', (string) $balance)[1]) > 3) {
//       return number_format($balance, 4, '.', '');
//    }

//    return number_format($balance, 4, '.', '');
// }
function formatBalance($money) {
   if (strpos((string)$money, '.') !== false && strlen(explode('.', (string)$money)[1]) > 2) {
       return number_format((float)$money, 4, '.', '');
   }
   return $money;
}

if ($flag == "searchusername") {
   $username = isset($this->viewData['username']) ? $this->viewData['username'] : '';
   $result = (new BusinessFlowModel())->Searchusername($username);

   $results = [];
   foreach ($result as $value) {
      // Add each item as an associative array with 'uid', 'username', and 'nickname'
      $data = [
         'uid' => $value['uid'], // 'uid' is the key
         'username' => $value['username'], // 'username' value
         'email' => $value['email'],
         'contact' => $value['contact'], // 'nickname' value
         'regtype' => $value['reg_type'], // 'nickname' value
      ];
      $results[] = $data; // Append the formatted result to the $results array
   }

   if ($result) {
      echo json_encode($results);
   } else {
      echo json_encode([['username' => '']]);
   }
}

if ($flag == "filterusername") {
   $username = isset($this->viewData['username']) ? $this->viewData['username'] : '';
   $result = (new BusinessFlowModel())->filterusername($username);
   if ($result) {
      echo json_encode([['username' => 'Nketiah']]);
   } else {
      echo json_encode([['username' => 'Nketiah']]);
   }
}

if ($flag == "transactiondata") {
   $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
   $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
   $result = (new BusinessFlowModel())->FetchTransactionData($page, $limit) ?? [];
   echo json_encode([
      'transaction' => $result['data'],
      'totalPages' => ceil($result['total'] / $limit),
   ]);
}

if ($flag == "getTransactionBet") {
   $transactionId = isset($this->viewData['transactionId']) ? $this->viewData['transactionId'] : null;

   $data = explode("_", $transactionId);
   if ($data[2] == 1 || $data[2] == 4 || $data[2] == 9 || $data[2] == 10) {
      $result = (new BusinessFlowModel())->ViewRedEvenlopes($data[0])[0];
      $fetchdeposit = (new BusinessFlowModel())->ViewDeposite($data[0])[0];
      $userData = (new BusinessFlowModel())->getUsernameById($result['uid']);
      if ($userData['reg_type'] == 'username') {
         $username = $userData['username'];
      } elseif ($userData['reg_type'] == 'contact') {
         $username = $userData['contact'];
      } else {
         $username = $userData['email'];
      }
      $response = [
         'redEnvelope' => $result,
         'deposit' => $fetchdeposit,
         'usernames' => $username,
      ];
      echo json_encode($response);
      exit();
   }

   $betTable = (new BusinessFlowModel())->getTables()[$data[1]]['bet_table'];
   $drawTable = (new BusinessFlowModel())->getTables()[$data[1]]['draw_table'];
   $result = (new BusinessFlowModel())->getBetDataByTransactionBet($betTable, $data[0])[0] ?? [];
   $close_and_opentimes = (new BusinessFlowModel())->getOpenAndCloseTimesByPeriod($result['bet_period'], $drawTable)[0] ?? [];
   $userData = (new BusinessFlowModel())->getUsernameById($result['uid']);
   $lotteryname = (new BusinessFlowModel())->getLottery($result['game_type'])['name'];
   if ($userData['reg_type'] == 'username') {
      $username = $userData['username'];
   } elseif ($userData['reg_type'] == 'contact') {
      $username = $userData['contact'];
   } else {
      $username = $userData['email'];
   }
   $result['bet_amount'] = formatBalance($result['bet_amount']);
   $betStatusMap = [2 => 'Win', 3 => 'Lost', 5 => 'Pending', 6 => 'Bet Cancelled', 7 => 'Refund'];
   $result['bettype'] = $result['bettype'] == 2 ? 'track' : ($result['bettype'] == 1 ? 'bet' : '');
   $result['bet_status'] = isset($betStatusMap[$result['bet_status']]) ? $betStatusMap[$result['bet_status']] : 'unknown';
   $result['rebate_amount'] = empty($result['rebate_amount']) ? "0.0000" : formatBalance($result['rebate_amount']);
   $result['game_type'] = $lotteryname;
   $result['reg_type'] = $username;
   $result['opening_time'] = $close_and_opentimes['opening_time'] ?? '';
   $result['closing_time'] = $close_and_opentimes['closing_time'] ?? '';
   $result['draw_number'] = $close_and_opentimes['draw_number'] ?? '';

   echo json_encode($result);
}

if ($flag == "filtertransactions") {
   $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
   $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
   $username = isset($this->viewData['username']) ? $this->viewData['username'] : '';
   $usernameCheck = (new BusinessFlowModel())->getUserIdByUsername($username);
   $orderid = isset($this->viewData['orderid']) ? $this->viewData['orderid'] : '';
   $ordertype = isset($this->viewData['ordertype']) ? $this->viewData['ordertype'] : '';
   $startdate = isset($this->viewData['startdate']) ? $this->viewData['startdate'] : '';
   $enddate = isset($this->viewData['enddate']) ? $this->viewData['enddate'] : '';
   
    if(!empty($usernameCheck) && $usernameCheck != null){
       $username = $usernameCheck[0]['uid'];
       $sunquery = (new BusinessFlowModel())->FilterTrsansactionDataSubQuery($username, $orderid, $ordertype, $startdate, $enddate);
       $result = (new BusinessFlowModel())->FilterTrsansactionData($sunquery, $page, $limit) ?? [];
       echo json_encode([
          'response' =>  "success",
          'transactions' => $result['data'],
          'totalPages' => ceil($result['total'] / $limit),
       ]);
    }else{
     $sunquery = (new BusinessFlowModel())->FilterTrsansactionDataSubQuery($username, $orderid, $ordertype, $startdate, $enddate);
      $result = (new BusinessFlowModel())->FilterTrsansactionData($sunquery, $page, $limit) ?? [];
      echo json_encode([
         'response' =>  "success",
         'transactions' => $result['data'],
         'totalPages' => ceil($result['total'] / $limit),
      ]);
   }
   
 
}

if ($flag == "lotterydata") {
   $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
   $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
   $result = (new BusinessFlowModel())->fetchBetRecordsFast($page, $limit) ?? [];
   echo json_encode([
      'lotterybet' => $result['data'],
      'totalPages' => ceil($result['total'] / $limit),
   ]);
}

if ($flag == "viewBetstake") {
   $betcode = isset($this->viewData['betcode']) ? $this->viewData['betcode'] : null;
   $gametype = isset($this->viewData['gametype']) ? (int) $this->viewData['gametype'] : null;
   $betTable = (new BusinessFlowModel())->getTables()[$gametype]['bet_table'];
   $drawTable = (new BusinessFlowModel())->getTables()[$gametype]['draw_table'];
   $result = (new BusinessFlowModel())->getBetDataByTransactionBet($betTable, $betcode)[0] ?? [];
   $close_and_opentimes = (new BusinessFlowModel())->getOpenAndCloseTimesByPeriod($result['bet_period'], $drawTable)[0] ?? [];
   $userData = (new BusinessFlowModel())->getUsernameById($result['uid']);
   if ($userData['reg_type'] == 'username') {
      $username = $userData['username'];
   } elseif ($userData['reg_type'] == 'contact') {
      $username = $userData['contact'];
   } else {
      $username = $userData['email'];
   }
   // Assign the determined value to the reg_type field
   $result['reg_type'] = $username;
   $result['bet_amount'] = formatBalance($result['bet_amount']);
   $result['rebate_amount'] = empty($result['rebate_amount']) ? "0.0000" : formatBalance($result['rebate_amount']);

   $lotteryname = (new BusinessFlowModel())->getLottery($result['game_type'])['name'];
   $betStatusMap = [2 => 'Win', 3 => 'Lost', 5 => 'Pending', 6 => 'Bet Cancelled', 7 => 'Refund'];
   $datta = json_decode($result['bet_odds'], true); // Decode JSON
   $betodds = reset($datta) * $result['multiplier'] * $result['unit_stake'];
   // $result['username'] = $usernames;
   $result['opening_time'] = $close_and_opentimes['opening_time'] ?? '';
   $result['closing_time'] = $close_and_opentimes['closing_time'] ?? '';
   // $result['draw_number'] = $close_and_opentimes['draw_number'] ?? '';
   $result['bettype'] = $result['bettype'] == 2 ? 'track' : ($result['bettype'] == 1 ? 'bet' : '');
   $result['bet_status'] = isset($betStatusMap[$result['bet_status']]) ? $betStatusMap[$result['bet_status']] : 'unknown';
   $result['game_type'] = $lotteryname;
   $result['bet_odds'] = $betodds;

   echo json_encode($result);
}

if ($flag == "fetchLotteryname") {
   $result = (new BusinessFlowModel())->fetchLotteryname();
   echo json_encode($result);
}

if ($flag == "filterbetdata") {
   $uid = isset($this->viewData['uid']) ? $this->viewData['uid'] : '';
   $usernameCheck = (new BusinessFlowModel())->getUserIdByUsername($uid);
   $gametype = isset($this->viewData['gametype']) ? $this->viewData['gametype'] : '';
   $betstate = isset($this->viewData['betstate']) ? $this->viewData['betstate'] : '';
   $betstatus = isset($this->viewData['betstatus']) ? $this->viewData['betstatus'] : '';
   $enddate = isset($this->viewData['enddate']) ? $this->viewData['enddate'] : '';
   $startdate = isset($this->viewData['startdate']) ? $this->viewData['startdate'] : '';
   $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
   $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;

   if(!empty($usernameCheck) && $usernameCheck != null){
      $usernames = $usernameCheck[0]['uid'];
      $sunquery = (new BusinessFlowModel())->filterBetData($usernames, $gametype, $betstate, $betstatus, $enddate, $startdate);
      $result = (new BusinessFlowModel())->getAllUserBetByUserId($sunquery, $page, $limit);

      echo json_encode([
      //    'response' =>  "success",
          'filterbet' =>  $result['data'],
         'totalPages' => ceil($result['total'] / $limit),
       ]);
   }else{

      $sunquery = (new BusinessFlowModel())->filterBetData($uid, $gametype, $betstate, $betstatus, $enddate, $startdate);
      $result = (new BusinessFlowModel())->getAllUserBetByUserId($sunquery, $page, $limit);

      echo json_encode([
      //    'response' =>  "success",
          'filterbet' =>  $result['data'],
         'totalPages' => ceil($result['total'] / $limit),
       ]);
   }
   
 
}

if ($flag == "trackdatas") {
   $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
   $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
   $result = (new BusinessFlowModel())->fetchTrackRecords($page, $limit) ?? [];

   echo json_encode([
      'trackbet' => $result['data'],
      'totalPages' => ceil($result['total'] / $limit),
   ]);

}
   


if ($flag == "filterTrack") {

      $username = isset($this->viewData['username']) ? $this->viewData['username'] : '';
      $usernameCheck = (new BusinessFlowModel())->getUserIdByUsername($username);
      $trackstatus = isset($this->viewData['trackstatus']) ? $this->viewData['trackstatus'] : '';
      $tracklotery = isset($this->viewData['tracklotery']) ? $this->viewData['tracklotery'] : '';
      $enddate = isset($this->viewData['enddate']) ? $this->viewData['enddate'] : '';
      $startdate = isset($this->viewData['startdate']) ? $this->viewData['startdate'] : '';
      $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
      $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
     
       if(!empty($usernameCheck) && $usernameCheck != null){
           $username = $usernameCheck[0]['uid'];
           $subquery = (new BusinessFlowModel())->FilterSubQuery($username, $trackstatus, $tracklotery, $enddate, $startdate);
           $result = (new BusinessFlowModel())->FilterTrackData($subquery, $page, $limit);

          echo json_encode([
            'trackfilter' => $result['data'],
            'totalPages' => ceil($result['total'] / $limit),
           ]);
        }
      else{
   
         $sunquery = (new BusinessFlowModel())->FilterSubQuery($username, $trackstatus, $tracklotery, $enddate, $startdate);
         $result = (new BusinessFlowModel())->FilterTrackData($sunquery, $page, $limit);

         echo json_encode([
            'trackfilter' => $result['data'],
            'totalPages' => ceil($result['total'] / $limit),
          ]);
      }   
}


if($flag == 'getTrackbet'){
   $token = isset($this->viewData['token']) ? $this->viewData['token'] : null;
   $data = explode("_", $token);
   $betTable = (new BusinessFlowModel())->getTables()[$data[1]]['bet_table'];
   $drawTable = (new BusinessFlowModel())->getTables()[$data[1]]['draw_table'];
   $result = (new BusinessFlowModel())->getTrackData($betTable,$data[0] )[0] ?? [];
   $close_and_opentimes = (new BusinessFlowModel())->getOpenAndCloseTimesByPeriod($result['bet_period'], $drawTable)[0] ?? [];
    $userData = (new BusinessFlowModel())->getUsernameById($result['uid']);
   if ($userData['reg_type'] == 'username') {
      $username = $userData['username'];
   } elseif ($userData['reg_type'] == 'contact') {
      $username = $userData['contact'];
   } else {
      $username = $userData['email'];
   }
   // // Assign the determined value to the reg_type field
     $result['reg_type'] = $username;
    $result['bet_amount'] = formatBalance($result['bet_amount']);
    $result['rebate_amount'] = empty($result['rebate_amount']) ? "0.0000" : formatBalance($result['rebate_amount']);

    $lotteryname = (new BusinessFlowModel())->getLottery($result['game_type'])['name'];
    $betStatusMap = [2 => 'Win', 3 => 'Lost', 5 => 'Pending', 6 => 'Bet Cancelled', 7 => 'Refund'];
   // $datta = json_decode($result['bet_odds'], true); // Decode JSON
   // $betodds = reset($datta) * $result['multiplier'] * $result['unit_stake'];
   // // $result['username'] = $usernames;
    $result['opening_time'] = $close_and_opentimes['opening_time'] ?? '';
    $result['closing_time'] = $close_and_opentimes['closing_time'] ?? '';
   //  $result['draw_number'] = $close_and_opentimes['draw_number'] ?? '';
    $result['bettype'] = $result['bettype'] == 2 ? 'track' : ($result['bettype'] == 1 ? 'bet' : '');
    $result['bet_status'] = isset($betStatusMap[$result['bet_status']]) ? $betStatusMap[$result['bet_status']] : 'unknown';
    $result['game_type'] = $lotteryname;
   // $result['bet_odds'] = $betodds;

     echo json_encode($result);

      }

      if($flag == 'getTracktokenbet'){
         $token = isset($this->viewData['token']) ? $this->viewData['token'] : null;
         $data = explode("_", $token);
          $betTable = (new BusinessFlowModel())->getTables()[$data[1]]['bet_table'];
          $drawTable = (new BusinessFlowModel())->getTables()[$data[1]]['draw_table'];
          $result = (new BusinessFlowModel())->getTrackData($betTable,$data[0]) ?? [];
          foreach ($result as &$item) {
            $trackData = (new BusinessFlowModel())->getTrackStatus($item['token']); // Fetch status and rule
            // $item['trackstatus'] = $trackData['track_status']; // Add status to the result
            $item['trackrule'] = $trackData[0]['track_rule'];    // Add rule to the result
        }
    
      
         echo json_encode($result);
      }

     