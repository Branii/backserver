<?php
// declare(strict_types=1);
// header('Content-Type: application/json');


$flag = isset($this->viewData['flag']) ? $this->viewData['flag'] : null;


if ($flag == "filterusername") {

    $username = isset($this->viewData['username']) ? $this->viewData['username'] : '';
    $result = (new BusinessFlowModel())->filterusername($username);
    if ($result) {
        echo json_encode([['username' => 'Nketiah']]);
    } else {
        echo json_encode([['username' => 'Nketiah']]);
    }
}

if ($flag == "transactiondata") {

    $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
    $result = (new BusinessFlowModel())->FetchTransactionData($page, $limit) ?? [];
    echo json_encode([
        'users' => $result['data'],
        'totalPages' => ceil($result['total'] / $limit),
    ]);
}


if ($flag == "lotterydata") {

    $page  = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
    $result = (new BusinessFlowModel())->fetchBetRecords($page, $limit) ?? [];
    echo json_encode([
        'lotterybet' => $result['data'],
        'totalPages' => ceil($result['total'] / $limit)
    ]);
}

if ($flag == "viewBetstake") {

    $betcode  = isset($this->viewData['betcode']) ? (int) $this->viewData['betcode'] : null;
    $gametype  = isset($this->viewData['gametype']) ? (int) $this->viewData['gametype'] : null;
    $betTable = (new BusinessFlowModel())->getTables()[$gametype]['bet_table'];
    $drawTable = (new BusinessFlowModel())->getTables()[$gametype]['draw_table'];
    $result = (new BusinessFlowModel())->getBetDataByTransactionBet($betTable, $betcode)[0] ?? [];
    $close_and_opentimes = (new BusinessFlowModel())->getOpenAndCloseTimesByPeriod($result['bet_period'], $drawTable)[0] ?? [];
    $username = (new BusinessFlowModel())->getUsernameById($result['uid'])['username'];
    $nickname = (new BusinessFlowModel())->getUsernameById($result['uid'])['nickname'];
    $usernames = ($username == "*****") ? $nickname : $username;
    $lotteryname = (new BusinessFlowModel())->getLottery($result['game_type'])['name'];
    $betStatusMap = [2 => 'Win', 3 => 'Lost', 5 => 'Pending', 6 => 'Bet Cancelled', 7 => 'Refund'];
    $datta = json_decode($result['bet_odds'], true);  // Decode JSON
    $betodds = reset($datta) * $result['multiplier']  * $result['unit_stake'];
    $result['username'] = $usernames;
    $result['opening_time'] = $close_and_opentimes['opening_time'] ?? '';
    $result['closing_time'] = $close_and_opentimes['closing_time'] ?? '';
    $result['draw_number'] = $close_and_opentimes['draw_number'] ?? '';
    $result['bettype'] = ($result['bettype'] == 2) ? 'track' : ($result['bettype'] == 1 ? 'bet' : '');
    $result['bet_status'] = isset($betStatusMap[$result['bet_status']]) ? $betStatusMap[$result['bet_status']] : 'unknown';
    $result['game_type'] = $lotteryname;
    $result['bet_odds'] = $betodds;

    echo json_encode($result);
}

if ($flag == "fetchLotteryname") {
    $result = (new BusinessFlowModel())->fetchLotteryname();
    echo json_encode($result);
}

if ($flag == "searchusername") {
    $username = isset($this->viewData['username']) ? $this->viewData['username'] : '';
    $result = (new BusinessFlowModel())->Searchusername($username);

    $results = [];
    foreach ($result as $value) {
        // Add each item as an associative array with 'uid', 'username', and 'nickname'
        $data = [
            'uid' => $value['uid'],  // 'uid' is the key
            'username' => $value['username'],  // 'username' value
            'email' => $value['email'], 
            'contact' => $value['contact'],  // 'nickname' value
        ];
        $results[] = $data;  // Append the formatted result to the $results array
    }


    if ($result) {
        echo json_encode($results);
    } else {
        echo json_encode([['username' => '']]);
    }
}

if ($flag == "filterbetdata") {

    $uid = isset($this->viewData['uid']) ? $this->viewData['uid'] : '';
    $gametype = isset($this->viewData['gametype']) ? $this->viewData['gametype'] : '';
    $betstate = isset($this->viewData['betstate']) ? $this->viewData['betstate'] : '';
    $betstatus = isset($this->viewData['betstatus']) ? $this->viewData['betstatus'] : '';
    $enddate = isset($this->viewData['enddate']) ? $this->viewData['enddate'] : '';
    $startdate = isset($this->viewData['startdate']) ? $this->viewData['startdate'] : '';
    $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;

    $sunquery =  (new BusinessFlowModel())->filterBetData($uid, $gametype, $betstate, $betstatus, $enddate, $startdate);
    $result = (new BusinessFlowModel())->getAllUserBetByUserId($sunquery,$page,$limit);

    // $bigArr = [];
    // foreach ($result['data'] as $data) {
    //     $username = (new BusinessFlowModel())->getUsernameById($data['uid'])['username'];
    //     $nickname = (new BusinessFlowModel())->getUsernameById($data['uid'])['nickname'];
    //     $lotteryname = (new BusinessFlowModel())->getLottery($data['game_type'])['name'];
    //     $gtid = (new BusinessFlowModel())->getLottery($data['game_type'])['gt_id'];
    //     $data['username'] = $username;
    //     $data['game_type'] = $lotteryname;
    //     $data['nickname'] = $nickname;
    //     $data['gt_id'] = $gtid;
    //     $bigArr[] = $data;
    // }

    echo json_encode([
        'filterbet' => $result,
      //  'totalPages' => ceil($result['total'] / $limit)
    ]);
}


if ($flag == "trackdata") {

    $page  = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
    $result = (new BusinessFlowModel())->fetchTrackRecords($page, $limit) ?? [];

    echo json_encode([
        'trackbet' => $result['data'],
        'totalPages' => ceil($result['total'] / $limit)
    ]);
}
