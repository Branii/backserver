<?php

// declare(strict_types=1);
// header('Content-Type: application/json');


$flag = isset($this->viewData['flag']) ? $this->viewData['flag'] : null;

if ($flag == "userlistdata") {

    $page = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1; // Ensure valid page number
    $limit = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 1) : 20; // Ensure valid limit 

     $res = UserManageModel::fetchUsersData();
     echo json_encode($res);
     return;
    // $page = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1; // Ensure valid page number
    // $limit = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 1) : 20; // Ensure valid limit 
    // $result = (new UserManageModel())->FetchUserlistData($page, $limit);

    //   echo json_encode([
    //     'users' => $result['data'],
    //     'totalPages' => ceil($result['total'] / $limit)
    // ]);
}

if ($flag == "filteruserlist") {
    $uid = isset($this->viewData['username']) ? $this->viewData['username'] : '';
    $states = isset($this->viewData['states']) ? $this->viewData['states'] : '';
    $usernameCheck = (new BusinessFlowModel())->getUserIdByUsername($uid);
    $startdate = isset($this->viewData['startdate']) ? $this->viewData['startdate'] : '';
    $enddate = isset($this->viewData['enddate']) ? $this->viewData['enddate'] : '';
    $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;

     if (!empty($usernameCheck) && $usernameCheck != null) {
         $username = $usernameCheck[0]['uid'];
        $sunquery = (new UserManageModel())->FilterUserlistDataSubQuery($username,$states, $startdate, $enddate);
         $result = (new UserManageModel())->Filteruserlist($sunquery,$page,$limit) ?? [];
        //  echo json_encode([
        //     // 'sql' => $result['sql'],
        //      'userlists' => $result,
        //      //'totalPages' => ceil($result['total'] / $limit)
        //  ]);
     }else{
        $sunquery = (new UserManageModel())->FilterUserlistDataSubQuery($uid,$states, $startdate, $enddate);
         $result = (new UserManageModel())->Filteruserlist($sunquery,$page,$limit) ?? []; 
        //  echo json_encode([
        //     // 'sql' => $result['sql'],
        //      'userlists' => $result,
        //     // 'totalPages' => ceil($result['total'] / $limit)
        //  ]);
     }
   
     $bigArr = [];
     foreach ($result['data'] as $data) {
     
         $referals = (new UserManageModel())->getDirectReferrals($data['agent_id']);
         $subor = (new UserManageModel())->getSubordinate($data['agent_id']);
         $totalsubordinate = (new UserManageModel())->Fetchsubordinates($data['uid']);

        //    $relationship = '';
            $subordinates = '';
        //    if (!empty($data['agent_name']) && $data['agent_name'] !== "*****" && !empty($subor))  {
        //      $relationship = $data['agent_name'] . ' ' . $referals . ' ' . $data['nickname'];
        //      $subordinates = (count($subor) > 1) ? '...' : "";
        //  } elseif ($data['agent_name'] && empty($subor)) {
        //     $relationship = "Top Agent";
        // } else {
        //      $relationship = '';
        //     $subordinates = '';
        // }

        //   $data['subordinates'] = $subor;
         $data['sub_count'] = $totalsubordinate;
        //  $data['relationship'] = $relationship;
        //   $data['subordinates'] = $subordinates;
         $bigArr [] = $data;
      
     }

    echo json_encode([
       // 'sql' => $result['sql'],
        'userlists' => $bigArr,
        'totalPages' => ceil($result['total'] / $limit)
    ]);
}


if ($flag  == "fetchRebatedata") {
    $result = (new UserManageModel())->FetchRebateData() ?? [];
    echo json_encode($result);
}


if ($flag == "addAgent") {

    $data = isset($this->viewData['data']) ? $this->viewData['data'] : '';
    parse_str($data, $parsedData);
    $result = (new UserManageModel())->validateRegister($parsedData) ?? [];
    if ($result == []) {
        $dateTime = date("Y-m-d H:i:s");
        $account_type = 2;
        $rebatelist =  (new UserManageModel())->fetchquotaData($parsedData['agentrebate']);
        $nickname = (new UserManageModel())->generateRandomNickname();
        $userstate = 1;
        $userstatus = 1;
        $type = "email";
        $datas = [
            'username' => $parsedData['agentname'],
            'nickname' => $nickname,
            'agent_name' =>  $parsedData['agentname'],
            'upassword' =>  password_hash($parsedData['agentpassword'], PASSWORD_BCRYPT),
            'email' =>  $parsedData['agentemail'],
            'rebate' =>  $parsedData['agentrebate'],
            'account_type' => $account_type,
            'created_at' => $dateTime,
            'user_state' => $userstate,
            'user_status' => $userstatus,
            'rebate_list' => $rebatelist,
            'reg_type' =>  $type,
            'agent_level' => '*****',
        ];

        $result = (new UserManageModel())->AddAgentData($datas) ?? [];
    }

    echo json_encode($result);
}


if ($flag == "fetchTopAgent") {

    $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
    $result = (new UserManageModel())->FetchTopAgentData($page, $limit) ?? [];

    $usersLists = [];
    foreach ($result['data'] as $data) {
      //  $userlogins = (new UserManageModel())->countUserLogs($data['uid']);
        $totalsubordinate = (new UserManageModel())->Fetchsubordinates($data['uid']);
        $relationship = '';
        if ($data['account_type'] == 2) {
            $relationship = "Top Agent";
        }

        // Add data to the user list
        $usersLists[] = array_merge($data, [
            //'userlogins' => $userlogins,
            'totalsubordinate' => $totalsubordinate,
            'relationship' => $relationship,
        ]);
    }

    echo json_encode([
        'topagent' => $usersLists,
        'totalPages' => ceil($result['total'] / $limit)
    ]);
}

if ($flag  == "userlogsdata") {

    $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
    $result = (new UserManageModel())->FetchUserlogsData($page, $limit) ?? [];
   
    echo json_encode([
        'userlogs' => $result['data'],
        'totalPages' => ceil($result['total'] / $limit)
    ]);
}

if ($flag == "filterUserlogs") {
    $username = isset($this->viewData['usernamelog']) ? $this->viewData['usernamelog'] : '';
    $usernameCheck = (new BusinessFlowModel())->getUserIdByUsername($username);
    $startdate = isset($this->viewData['startdate']) ? $this->viewData['startdate'] : '';
    $enddate = isset($this->viewData['enddate']) ? $this->viewData['enddate'] : '';
    $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
    if (!empty($usernameCheck) && $usernameCheck != null) {
        $usernamelog = $usernameCheck[0]['uid'];
        $sunquery = (new UserManageModel())->FilterUserlogsDataSubQuery($usernamelog, $startdate, $enddate);
        $result = (new UserManageModel())->Filteruserlogs($sunquery, $page, $limit) ?? [];
        echo json_encode([
             'sql' => $result['sql'],
             'userloggs' => $result['data'],
             'totalPages' =>  ceil($result['total'] / $limit)
        ]);
    } else {

        $sunquery = (new UserManageModel())->FilterUserlogsDataSubQuery($username, $startdate, $enddate);
        $result = (new UserManageModel())->Filteruserlogs($sunquery, $page, $limit) ?? [];

        echo json_encode([
            'sql' => $result['sql'],
            'userloggs' => $result['data'],
            'totalPages' => ceil($result['total'] / $limit)
        ]);
    }
}

if ($flag == "getuserrebate") {

    $uid = isset($this->viewData['uid']) ? $this->viewData['uid'] : '';
    $result = (new UserManageModel())->fetchUserRebateList($uid) ?? [];
    echo json_encode($result);
}

if ($flag == "updateUsedquota") {

    $uid = isset($this->viewData['uid']) ? $this->viewData['uid'] : '';
    $bonus_group = isset($this->viewData['bonus']) ? $this->viewData['bonus'] : '';
    $rebate_group = isset($this->viewData['rebate']) ? $this->viewData['rebate'] : '';
    $quata_group = isset($this->viewData['quota']) ? $this->viewData['quota'] : '';
    $count_group = isset($this->viewData['count']) ? $this->viewData['count'] : '';

    function parseEncodedData($data)
    {
        $decodedData = urldecode($data); // Decode URL-encoded string
        return array_map('floatval', explode(',', $decodedData)); // Split into array and convert to float
    }
    $parsedBonus = parseEncodedData($bonus_group);
    $parsedRebate = parseEncodedData($rebate_group);
    $parsedQuota = parseEncodedData($quata_group);
    $parsedCount = parseEncodedData($count_group);

    // Define keys for the final structured data
    $keys = ['odds_group', 'rebate', 'quota', 'counts'];

    // Combine all parsed data into a structured array
    $results = [];
    foreach ($parsedBonus as $key => $value) {
        $row = [
            $keys[0] => $parsedBonus[$key] ?? null,
            $keys[1] => $parsedRebate[$key] ?? null,
            $keys[2] => $parsedQuota[$key] ?? null,
            $keys[3] => $parsedCount[$key] ?? null,
        ];
        $results[] = $row;
    }

    // Map the results to an array with keys
    $result = (new AgentManageModel())->UpdateUserquotaData(json_encode($results), $uid);
    echo json_encode($result);
}

if ($flag == "fetchsubagent") {
    $user_id   = $this->viewData['user_id'];
    $page = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1; // Ensure valid page number
    $limit = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 1) : 20; // Ensure valid limit 

     $res = UserManageModel::fetchAgentSubs($user_id);
     echo json_encode($res);

    return;
  
    // $result =  (new UserManageModel())->FetchSubAgents($nickname,$page,$limit);
    // echo json_encode([
    //     'subagent' => $result['data'],
    //     'totalPages' => ceil($result['total'] / $limit)
    // ]);
   
}else if($flag == "blockUser"){

    $user_id = $this->viewData["user_id"];
    $res     = UserManageModel::blockUserData($user_id);
    echo json_encode($res);
    return;
}else if($flag == "deleteUser"){

    $user_id = $this->viewData["user_id"];
    $res     = UserManageModel::deleteUserData($user_id);
    echo json_encode($res);
    return;
}else if($flag == "fetchUserLotteries"){
;    $user_id = $this->viewData["user_id"];
    $res     = UserManageModel::fetchUserLotteries($user_id);
    echo json_encode($res);
}else if($flag == "updateLotteryState"){
    $user_id    = $this->viewData["user_id"];
    $lottery_id = $this->viewData["lottery_id"];
    
    $res        = UserManageModel::update_lottery_stat_for_user($user_id,$lottery_id);

    echo json_encode($res);
}else if($flag === "fetchUserLogs"){


    $user_id    = $this->viewData["user_id"];
    $res        = UserManageModel::fetchUserLogs($user_id);
    echo json_encode($res);

  

}else if($flag == "blockUserIp"){
    $ip_id  = $this->viewData['ulog_id'];
    $uid    = $this->viewData['user_id'];
    $res    = UserManageModel::block_user_ip($uid, $ip_id);
    echo json_encode($res);
}else if($flag === "fetchUserInfo"){

    $user_id         = $this->viewData['user_id'];
    $user_id         = intval($user_id);
    $data            = UserManageModel::FetchUserData($user_id);
    // $userData        = UserManageModel::getBankAccounts($user_id );
    // $withdrawalCount = UserManageModel::withdrawalCount($user_id);
  

    echo json_encode($data);
}else if($flag === "updateUserData"){
    $user_id         = $this->viewData["user_id"];
    $depositLimit    = $this->viewData["depositLimit"];
    $withdrawalLimit = $this->viewData["withdrawalLimit"];
    $rebate          = $this->viewData["rebate"];
    $state           = $this->viewData["state"];
    $dailyBettingTotalLimit = $this->viewData["dailyBettingTotalLimit"];

    $data = UserManageModel::updateUserInfo($user_id, $depositLimit,$withdrawalLimit, $rebate,$state,$dailyBettingTotalLimit);

    echo json_encode($data);
}else if($flag === "fetchUserRel"){
    $user_id   = $this->viewData["user_id"];
    $data = UserManageModel::fetch_user_rel($user_id);

    echo json_encode($data);
    return;
}



if ($flag == "fetchaccountchange") {

    $uid = isset($this->viewData['uid']) ? $this->viewData['uid'] : '';
    $page = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1; // Ensure valid page number
    $limit = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 1) : 20; // Ensure valid limit 
    $result =  (new UserManageModel())->FetchUserAccountChange($uid,$page,$limit);
    echo json_encode([
        'account' => $result['data'],
        'totalPages' => ceil($result['total'] / $limit)
    ]);
   
}

if ($flag == "filterchange") {
    $uid = isset($this->viewData['uid']) ? $this->viewData['uid'] : '';
    $ordertype = isset($this->viewData['ordertype']) ? $this->viewData['ordertype'] : '';
    $page = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1; // Ensure valid page number
    $limit = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 1) : 20; // Ensure valid limit 
    $startdate = isset($this->viewData['startdate']) ? $this->viewData['startdate'] : '';
    $enddate = isset($this->viewData['enddate']) ? $this->viewData['enddate'] : '';
    $subquery =  (new UserManageModel())->FilterChangeDataSubQuery($ordertype,$startdate,$enddate);
    $result =  (new UserManageModel())->FilterUserAccountChange($subquery,$uid,$page,$limit);
    echo json_encode([
        'filteraccount' => $result['data'],
        'totalPages' => ceil($result['total'] / $limit)
    ]);
   
}






function get_user_logs(array $userData = []): array
{
    $userLogs = AccountManage::userDataLogs($userData);
    if (empty($userLogs)) return [];
    $results['numLogs'] = $userLogs[0]->total_count;
    foreach ($userLogs  as $data) {
        $browser = substr($data->browser_info, 0, 10);
        $device  = substr($data->device_info, 0, 20);

        $results['data'][] = ['username' => $data->username, 'login_time' => $data->login_date . ' - ' . $data->login_time, 'ip' => $data->ip, 'ipLocation' => '', 'browser' => $browser, 'loginDevice' => $device, 'version' => $data->app_version];
    }

    return $results;
}
