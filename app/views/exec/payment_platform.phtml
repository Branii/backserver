<?php


$flag = isset($this->viewData['flag']) ? $this->viewData['flag'] : null;

// if($flag == "fetchPaymentPlatform"){
//     $page = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
//     $limit = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
//     $result = PaymentPlatformModel::FetchPaymentPlatform($page, $limit) ?? [];
//     echo json_encode([
//         'payment' => $result['data'],  // Correct key
//         'totalPages' => ceil($result['total'] / $limit),
//     ]);
// }

if($flag == "addpayment"){
    $data = json_decode(file_get_contents("php://input"), true);
    $paymentname = $data['paymentname'] ?? ''; 
    $paymentname = $data['paymentname'] ?? '';
    $currencytype = $data['currencytype'] ?? '';
    $paylogo = $data['paylogo'] ?? '';
    $currencystate = $data['currencystate'] ?? '';
    $maxiamount = $data['maxiamount'] ?? '';
    $miniamount = $data['miniamount'] ?? '';
    $currencyselect = $data['currencyselect'] ?? '';
    $approvedby = $data['approvedby'] ?? '';
    $result = PaymentPlatformModel::AddPaymentPlatform($paymentname, $currencytype,$paylogo, $currencystate,$maxiamount, $miniamount,$currencyselect,$approvedby) ?? [];
    echo json_encode($result);
}

if($flag == "deletepayment"){
    $payid = isset($this->viewData['payid']) ? (int) $this->viewData['payid'] : "";
    $result = PaymentPlatformModel::DeletePaymentPlatform($payid) ?? [];
    echo json_encode($result);
}

if($flag == "editpayment"){
    $payid = isset($this->viewData['payid']) ? (int) $this->viewData['payid'] : "";
    $result = PaymentPlatformModel::EditPaymentPlatform($payid) ?? [];
    echo json_encode($result);
}

if($flag == "updateplatform"){
    $typecurrency = isset($this->viewData['typecurrency']) ?  $this->viewData['typecurrency'] : "";
    $maxiamounts = isset($this->viewData['maxiamounts']) ?  $this->viewData['maxiamounts'] : "";
    $minamount = isset($this->viewData['minamount']) ?  $this->viewData['minamount'] : "";
    $statecurrent = isset($this->viewData['statecurrent']) ? $this->viewData['statecurrent'] : "";
    $paymentids = isset($this->viewData['paymentids']) ?  $this->viewData['paymentids'] : "";
    $result = PaymentPlatformModel::UpdatePaymentPlatform($typecurrency,$maxiamounts,$minamount,$statecurrent,$paymentids) ?? [];
    echo json_encode($result);
}
//typecurrency,maxiamounts,minamount,statecurrent,paymentids

if ($flag == "filterpayments") {
    // $partner_id = isset($this->viewData['partner_id']) ?  $this->viewData['partner_id'] : "";
    // $payment_platform_id = isset($this->viewData['payment_platform_id']) ?  $this->viewData['payment_platform_id'] : "";
    // $result = PaymentPlatformModel::fetchAllBlockedPartnerPaymentPlatforms($curencytypes); 
    // $partnerBlockedPaymentsPlatforms          = explode(",",$result['partnerBlockedPaymentsPlatforms']);
    // $allPaymentPlatforms   = PaymentPlatformModel::fetchAllPaymentPlatforms()["cid"];
    // $blocked_languages  = implode(',',array_diff($allPaymentPlatforms,$partnerBlockedPaymentsPlatforms));
    
    // $subquery = PaymentPlatformModel::Platformsubquery($curencytypes,$stautspayment,$startdate,$enddate) ?? [];
    $currency_types  = isset($this->viewData['curency_types']) ?  $this->viewData['curency_types'] : "";
    $status          = isset($this->viewData['status']) ?  $this->viewData['status'] : "";
    $startdate       = isset($this->viewData['startdate']) ? $this->viewData['startdate'] : "";
    $enddate         = isset($this->viewData['enddate']) ?  $this->viewData['enddate'] : "";
    $page            = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit           = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;

    $results = PaymentPlatformModel::searchPaymentPlatform(["currency_type" => $currency_types,"status" => $status,  "startDate" => $startdate,"endDate" => $enddate,], $page, $limit
    );

    echo json_encode($results);

    // $result   = PaymentPlatformModel::FilterPlatformData($subquery,$blocked_partner_payment_platforms,$page,$limit) ?? [];
    // echo json_encode([
    //     'payments' => $result['data'],
    //     'totalPages' => ceil($result['total'] / $limit),
    // ]);
}

if($flag == "fetchPaymentPlatform"){

    try{
    $currency_types  = isset($this->viewData['currency_types']) ?  $this->viewData['currency_types'] : "";
    $status          = isset($this->viewData['status']) ?  $this->viewData['status'] : "";
    $startdate       = isset($this->viewData['startdate']) ? $this->viewData['startdate'] : "";
    $enddate         = isset($this->viewData['enddate']) ?  $this->viewData['enddate'] : "";
    $page            = isset($this->viewData['page']) ? (int) $this->viewData['page'] : 1;
    $limit           = isset($this->viewData['limit']) ? (int) $this->viewData['limit'] : 20;
    $results = [];
    $results         = PaymentPlatformModel::searchPaymentPlatform(["currency_type" => $currency_types,"status" => $status,  "startDate" => $startdate,"endDate" => $enddate], $page, $limit
    );

    echo json_encode($results);
}catch(Exception $e){
    echo json_encode(["status" => "error", "data" => $e->getMessage()]);       
}

}























// set_error_handler(function ($errno, $errstr, $errfile, $errline) {
//     // Throw an Exception with the error message and details
//     throw new \Exception("$errstr in $errfile on line $errline", $errno);
// });
// declare(strict_types=1);
// header('Content-Type: application/json');


// if(session_status() == PHP_SESSION_NONE){
//     session_start();
// }


// $currencyCodes = [
//     // A
//     'AED','AFN','ALL','AMD','ANG','AOA','ARS','AUD','AWG','AZN',
//     // B
//     'BAM','BBD','BDT','BGN','BHD','BIF','BMD','BND','BOB','BOV',
//     'BRL','BSD','BTN','BWP','BYN','BZD',
//     // C
//     'CAD','CDF','CHE','CHF','CHW','CLF','CLP','CNY','COP','COU',
//     'CRC','CUC','CUP','CVE','CZK',
//     // D
//     'DJF','DKK','DOP','DZD',
//     // E
//     'EGP','ERN','ETB','EUR',
//     // F
//     'FJD','FKP',
//     // G
//     'GBP','GEL','GHS','GIP','GMD','GNF','GTQ','GYD',
//     // H
//     'HKD','HNL','HRK','HTG','HUF',
//     // I
//     'IDR','ILS','INR','IQD','IRR','ISK',
//     // J
//     'JMD','JOD','JPY',
//     // K
//     'KES','KGS','KHR','KMF','KPW','KRW','KWD','KYD','KZT',
//     // L
//     'LAK','LBP','LKR','LRD','LSL','LYD',
//     // M
//     'MAD','MDL','MGA','MKD','MMK','MNT','MOP','MRU','MUR','MVR',
//     'MWK','MXN','MXV','MYR','MZN',
//     // N
//     'NAD','NGN','NIO','NOK','NPR','NZD',
//     // O
//     'OMR',
//     // P
//     'PAB','PEN','PGK','PHP','PKR','PLN','PYG',
//     // Q
//     'QAR',
//     // R
//     'RON','RSD','RUB','RWF',
//     // S
//     'SAR','SBD','SCR','SDG','SEK','SGD','SHP','SLL','SOS','SRD',
//     'SSP','STN','SVC','SYP','SZL',
//     // T
//     'THB','TJS','TMT','TND','TOP','TRY','TTD','TWD','TZS',
//     // U
//     'UAH','UGX','USD','USN','UYI','UYU','UYW','UZS',
//     // V
//     'VED','VES','VND','VUV',
//     // W
//     'WST',
//     // X (special codes / precious metals, etc.)
//     'XAF','XAG','XAU','XBA','XBB','XBC','XBD','XCD','XDR','XOF',
//     'XPD','XPF','XPT','XSU','XTS','XUA','XXX',
//     // Y
//     'YER',
//     // Z
//     'ZAR','ZMW','ZWL'
// ];



// $adminEmail = (new Controller)->getSeesion("isUserLoggedIn");
// $fullname   = (new Controller)->getUsername($adminEmail);

// $flag  = isset($this->viewData['flag']) ? $this->viewData['flag'] : null;
// $page  = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1; // Ensure valid page number
// $limit = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 1) : 20; // Ensure valid limit 

// $results = [];

// if ($flag == "fetchPaymentPlatformsForPartner") {
//     $results = PaymentPlatformModel::fetchPaymentPlatformsForPartner($page,$limit);   
// }else if($flag == "fetchpaymentplatforms"){
//     $results = PaymentPlatformModel::fetchPaymentPlatforms();
// }else if($flag == "searchPaymentPlatform"){
//     $platformName = isset($this->viewData['platformName']) ? $this->viewData['platformName'] : "";
//     $currency     = isset($this->viewData['currency']) ? $this->viewData['currency']         : "";
//     $status       = isset($this->viewData['status']) ? $this->viewData['status']             : "";
//     $startDate    = isset($this->viewData['startDate']) ? $this->viewData['startDate']       : "";
//     $endDate      = isset($this->viewData['endDate']) ? $this->viewData['endDate']           : "";
//     $results      = PaymentPlatformModel::searchPaymentPlatform(["platformID" => $platformName,"currency" => $currency,"status" => $status,"startDate" => $startDate,"endDate" => $endDate,"page" => $page, "limit" => $limit]);

// }else if($flag == "addNewPaymentPlaftorm"){
   
//     try{

   
//     $paymentType    = isset($this->viewData['paymentType']) ? $this->viewData['paymentType'] : "";
//     $paymentTypeName    = isset($this->viewData['paymentTypeName']) ? $this->viewData['paymentTypeName'] : "";
//     $currency       = isset($this->viewData['currency']) ? $this->viewData['currency']         : "";
//     $status         = isset($this->viewData['status']) ? $this->viewData['status']             : "";
//     $fee            = isset($this->viewData['fee']) ? $this->viewData['fee']       : "";
//     $maxAmount      = isset($this->viewData['maxAmount']) ? max($this->viewData['maxAmount'],0) : 0;
//     $minAmount      = isset($this->viewData['minAmount']) ? $this->viewData['minAmount']         : 0           ;
//     $siteUrl        = isset($this->viewData['siteUrl']) ? $this->viewData['siteUrl']           : "";
//     $adminSiteUrl   = isset($this->viewData['adminSiteUrl']) ? $this->viewData['adminSiteUrl']           : "";
//     $info           = isset($this->viewData['info']) ? $this->viewData['info']         : 0           ;
//     $priority       = isset($this->viewData['priority']) ? $this->viewData['priority']           : "";
//     $countries      = isset($this->viewData['countries']) ? $this->viewData['countries']           : "";
//     $currentDate    = date("Y-m-d / H:i:s");


//     if(!in_array($currency,$currencyCodes)){

//         echo json_encode(["status" => "error", "data" => "Invalid request, please try again later."]);
//         return;
//     }

//     if(empty($paymentType) || empty($paymentTypeName) || empty($currency) || empty($status)){

//         echo json_encode(["status" => "error", "data" => "Please fill the required fields."]);
//         return ;
//     }



//     // echo json_encode(["payment_type_id" => trim($paymentType),"name" => trim($paymentTypeName),"status" => $status,"created_by" => trim($fullname["full_name"]),"date_created" => trim($currentDate),"currency" => trim($currency),"fee" => trim($fee),"site_url" => trim($siteUrl), "admin_site_url" => trim($adminSiteUrl),"last_update" => trim($currentDate),"last_update_by" => trim($fullname["full_name"]),"min_amount" => trim($minAmount),"max_amount" => trim($maxAmount),"info" => $info,"priority" => $priority,"countries" => serialize(urldecode($countries))]);
//     // return;
//     $results        = PaymentPlatformModel::addNewPaymentPlaftorm(["payment_type_id" => trim($paymentType),"name" => trim($paymentTypeName),"status" => $status,"created_by" => trim($fullname["full_name"]),"date_created" => trim($currentDate),"currency" => trim($currency),"fee" => trim($fee),"site_url" => trim($siteUrl), "admin_site_url" => trim($adminSiteUrl),"last_update" => trim($currentDate),"last_update_by" => trim($fullname["full_name"]),"min_amount" => trim($minAmount),"max_amount" => trim($maxAmount),"info" => urldecode($info),"priority" => $priority,"countries" => urldecode($countries)]);


// }catch(Exception $e){
//     $results  = ["status"=> "error", "data" => $e->getMessage()];
      
// }

// }else if($flag == "editPaymentPlaftorm"){
   
//     $paymentType    = isset($this->viewData['paymentType']) ? $this->viewData['paymentType'] : "";
//     $paymentTypeName    = isset($this->viewData['paymentTypeName']) ? $this->viewData['paymentTypeName'] : "";
//     $currency       = isset($this->viewData['currency']) ? $this->viewData['currency']         : "";
//     $status         = isset($this->viewData['status']) ? $this->viewData['status']             : "";
//     $fee            = isset($this->viewData['fee']) ? $this->viewData['fee']       : "";
//     $maxAmount      = isset($this->viewData['maxAmount']) ? $this->viewData['maxAmount'] : 0;
//     $minAmount      = isset($this->viewData['minAmount']) ? $this->viewData['minAmount']         : 0           ;
//     $siteUrl        = isset($this->viewData['siteUrl']) ? $this->viewData['siteUrl']           : "";
//     $adminSiteUrl   = isset($this->viewData['adminSiteUrl']) ? $this->viewData['adminSiteUrl']           : "";
//     $info           = isset($this->viewData['info']) ? $this->viewData['info']         : 0           ;
//     $priority       = isset($this->viewData['priority']) ? $this->viewData['priority']           : "";
//     $countries      = isset($this->viewData['countries']) ? $this->viewData['countries']           : "";
//     $currentDate    = date("Y-m-d / H:i:s");
    

//     if(!in_array($currency,$$currencyCodes)){

//         echo json_encode(["status" => "error", "data" => "Invalid request, please try again later."]);
//         return;
//     }

//     if(empty($paymentType) || empty($paymentTypeName) || empty($currency) || empty($status)){

//         echo json_encode(["status" => "error", "data" => "Please fill the required fields."]);
//         return ;
//     }

//     $results        = PaymentPlatformModel::editPaymentPlaftorm(["payment_type_id" => trim($paymentType),"status" => trim($status),"currency" => trim($currency),"fee" => trim($fee),"site_url" => trim($siteUrl), "admin_site_url" => trim($adminSiteUrl),"last_update" => $currentDate,"last_update_by" => $fullname["full_name"],"min_amount" => $minAmount,"max_amount" => $maxAmount,"info" => urldecode($info),"priority" => $priority,"countries" => urldecode($countries)]);

// }


// else if($flag == "searchPlatformNames"){
//     $platformName      = isset($this->viewData['platformName']) ? $this->viewData['platformName'] : "";
//     $results      = PaymentPlatformModel::searchPlatformNames( $platformName);
// }else if($flag == "fetchDifferentCurrency"){
//     $results      = PaymentPlatformModel::fetchDifferentCurrency();
// }
else if($flag == "searchPlatformNames"){
    
    $platformName      = isset($this->viewData['platformName']) ? $this->viewData['platformName'] : "";
    $db_id                = 2;
    $results      = PaymentPlatformModel::searchPlatformNames($db_id, $platformName);
}else if($flag == "fetchDifferentCurrency"){
    $results      = PaymentPlatformModel::fetchDifferentCurrency();
}




// echo json_encode(value: $results);





