<?php
set_error_handler(function ($errno, $errstr, $errfile, $errline) {
    // Throw an Exception with the error message and details
    throw new \Exception("$errstr in $errfile on line $errline", $errno);
});
// declare(strict_types=1);
// header('Content-Type: application/json');


$flag  = isset($this->viewData['flag']) ? $this->viewData['flag'] : null;
$page  = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1; // Ensure valid page number
// $limit = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 1) : 20; // Ensure valid limit 

$results = [];

if ($flag == "users-win-loss") {
    $lottery_id = $this->viewData['lottery_id'];
    $start_date = $this->viewData['start_date'];
    $end_date   = $this->viewData['end_date'];
    $limit      = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 10) : 10;
    $users_results      = DataReportModel::fetch_users_win_loss_report($page,$limit);
    $bet_tables = $lottery_id == "all" ?  BusinessFlowModel::getAllGameIds() : BusinessFlowModel::getAllGameIdsWithCondition(['game_type' => $lottery_id]);
    if($users_results["status"] === "error") {
        echo json_encode($user_results);
        return;
    }
    $users = $users_results["data"];
    $results = computeUserAndSubsStats($users, $bet_tables, ["lottery_id" => $lottery_id, 'datecreated' => $start_date, 'enddate' => $end_date]);
} else if ($flag == "filter-lotteries") {
    $lottery_name = isset($this->viewData['lottery_name']) ? max((int)$this->viewData['lottery_name'], 1) : "";
    if (!empty($lottery_name)) $results = (new DataReportModel())->FiltertLotteryNames();
} else if ($flag == 'search-user-win-loss') {
    $user_id    = $this->viewData['user_id'];
    $lottery_id = $this->viewData['lottery_id'];
    $start_date = $this->viewData['start_date'];
    $end_date   = $this->viewData['end_date'];
    if (empty($user_id)) {
        echo json_encode(['error' => "No User Selected."]);
        return true;
    }

    $user_res = DataReportModel::filterWinLossRecordsForUser($user_id,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date]);
    echo json_encode($user_res);

    return ;      
    // $user = $user_res["data"];
    // $bet_tables = $lottery_id == "all" ?  BusinessFlowModel::getAllGameIds() : BusinessFlowModel::getAllGameIdsWithCondition(['game_type' => $lottery_id]);
    // if (empty($user)) {
    //     echo json_encode([]);
    // } else {
        
    //     echo json_encode(computeUserAndSubsStats([$user], $bet_tables, ["lottery_id" => $lottery_id, 'datecreated' => $start_date, 'enddate' => $end_date]));
    // }
    // return;
    // if (!empty($lottery_name)) $results = (new DataReportModel())->FiltertLotteryNames();
} else if ($flag === "get-top-agents") {
  
    // get the filter parameters
    $lottery_id = $this->viewData['lottery_id'];
    $start_date = $this->viewData['start_date'];
    $end_date   = $this->viewData['end_date'];
    $limit      = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 10) : 10;
    

    // fetch the top agents
    $top_agents_results = DataReportModel::fetch_top_agents($page,$limit);


    if($top_agents_results['status'] == "error")  {
        echo json_encode(["status" => "error", "data" => "Internal Server Error." ]); 
        return;
    }
    $top_agents = $top_agents_results['data'];
  
    $results = [];
    foreach($top_agents as $key => $top_agent){
        $res = DataReportModel::filterWinLossRecordsForUser($top_agent->uid,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date,],false,false);
        if($res['status'] === "error") continue;
        $res["data"]["total_records"] = $top_agent->total_records;
        $results[] = $res['data'];
    }
   


    echo json_encode(['status' => "success",'data' => $results]);

    return;
    // $lottery_id = $this->viewData['lottery_id'];
    // $start_date = $this->viewData['start_date'];
    // $end_date   = $this->viewData['end_date'];
    // $page       = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1;
    // $limit      = 10;
    // $results =   $userData   = ["lottery_id" => $lottery_id, 'datecreated' => $start_date, 'enddate' => $end_date];



    
    // $user_res = DataReportModel::filterWinLossRecordsForUser($user_id,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date]);

    // echo json_encode($user_res);

    // $filter_res = DataReportModel::filter_only_top_agents($userData, intval($page));

    // $bet_tables = $lottery_id == "all" ?  BusinessFlowModel::getAllGameIds() : BusinessFlowModel::getAllGameIdsWithCondition(['game_type' => $lottery_id]);

    // if (empty($filter_res)) {
    //     $results = [];
    // } else {
    //     $results = [];
    //     foreach ($filter_res  as $data) {

    //         $summed_results = [];

    //         $total_tickets_info     = DataReportModel::filterGetBetTicketsNum($data->uid, $bet_tables, $userData);
    //         $total_valid_amount     = DataReportModel::filter_total_valid_amount($data->uid, $bet_tables, $userData);
    //         $num_bettors            = DataReportModel::num_bettors($data->uid, $bet_tables, $userData);
    //         $view_btn               = $data->account_type == 1 || ($total_tickets_info['num_subs'] == 0) ? "" : "<button class='btn tag' data-bs-target='#' data-bs-toggle='' id='get-subs-btn'>Subs</button>";
    //         $view_btn               = $data->account_type == 1 ? "" : "<i class='bx bxs-user-account' style='font-size:20px'></i>";
    //         $relationship           =  $data->account_type == 2 ? "<button class='btn tag'> Top Agent </button>" : "<button class='btn tag user-rel' data-bs-target='#user-details-modal' data-bs-toggle='modal'> " .  (trim($data->agent_name) === "*****" ? "" : ($data->agent_sub_count <= 1 ? "{$data->agent_name}>$data->username" : "{$data->agent_name}>$data->username...")) . " </button>";
    //         $results[] = ['uid' => $data->uid, 'account_type' => $data->account_type, 'username' => $data->username, 'rel' => $relationship, 'num_bettors' => $num_bettors, 'num_bet_tickets' => $total_tickets_info['num_bet_tickets'], 'user_rebate' => $data->rebate, 'total_bet_amount' => $total_tickets_info['total_bet_amount'], 'total_rebate_amount' => $total_tickets_info['total_rebate_amount'], 'total_valid_amount' => $total_valid_amount, 'total_win_amount' =>  $total_tickets_info['total_win_amount'], 'win_loss' => ($total_tickets_info['total_rebate_amount'] + $total_tickets_info['total_win_amount']) - $total_valid_amount, 'view_btn' => $view_btn, 'num_top_agents' => $total_tickets_info['num_top_agents']];
    //     }
    // }
} else if ($flag == "get-user-details") {

    $user_id    = $this->viewData['user_id'];
    $lottery_id = $this->viewData['lottery_id'];
    $start_date = $this->viewData['start_date'];
    $end_date   = $this->viewData['end_date'];
    if (empty($user_id)) {
        echo json_encode(['error' => "No User Selected."]);
        return true;
    }
    
    $user_res = DataReportModel::filterWinLossRecordsForUser($user_id,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date],true);

    echo json_encode($user_res);

    return ;      



    // $user_id = isset($this->viewData['user_id']) ? (int)$this->viewData['user_id'] : "";

    // $lottery_id = $this->viewData['lottery_id'];
    // $start_date = $this->viewData['start_date'];
    // $end_date   = $this->viewData['end_date'];
    // $page       = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1;
    // $limit      = 10;
    // $results =   $userData   = ["user_id" => $user_id, "lottery_id" => $lottery_id, 'datecreated' => $start_date, 'enddate' => $end_date];


    // $user = DataReportModel::fetchUser($user_id);
    // $bet_tables =  $lottery_id == "all" ?  BusinessFlowModel::getAllGameIds() : BusinessFlowModel::getAllGameIdsWithCondition(['game_type' => $lottery_id]);

    // if (empty($user)) {
    //     //$results = [];
    // } else {
    //     $results   = DataReportModel::getBetTicketsNumForUser($user, $bet_tables, $userData);
    // }
} else if ($flag == "get-active-subs") {

    
     // get the filter parameters
     $agent_id   = $this->viewData['agent_id'];
     $lottery_id = $this->viewData['lottery_id'];
     $start_date = $this->viewData['start_date'];
     $end_date   = $this->viewData['end_date'];
     $limit      = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 10) : 10;
     
     
     $subs = DataReportModel::getActiveSubs($agent_id);
     
     if(empty($subs)){  echo empty_response(); return; }
   
     $results = [];
     foreach($subs as $key => $sub){
         $res = DataReportModel::filterWinLossRecordsForUser($sub->uid,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date,]);
         if($res['status'] === "error") continue;
         $res['data']["totalRecords"] = $sub->total_records;
         $data = $res['data'];
         $results[] = $res['data'];
     }

     echo json_encode(['status' => "success",'data' => $results]);
 
     return;

    // $lottery_id     = $this->viewData['lottery'];
    // $start_date     = $this->viewData['start_date'];
    // $end_date       = $this->viewData['end_date'];
    // $user_id        = isset($this->viewData['user_id'])    ? max((int)$this->viewData['user_id'], 1) : 1;
    // $page           = isset($this->viewData['page'])       ? max((int)$this->viewData['page'], 1) : 1;
    // $limit          = 10;
    // $userData       = ["user_id" => $user_id, "lottery_id" => $lottery_id, 'datecreated' => $start_date, 'enddate' => $end_date, 'page' => $page, 'limit' => $limit];

    // $results = $userData;

    // if (isset($_POST["get_rel"])) {
        // $results = DataReportModel::fetch_user_rel($user_id);
    //     echo json_encode($results);
    //     return;
    // }
    // $all_users = DataReportModel::allSubs($user_id);

    // if (empty($all_users)) {
    //     echo json_encode([]);
    //     return;
    // }

    // $num_subs =  $all_users[0]->num_subs;

    // $user  = DataReportModel::fetchUser($user_id);

    // $bet_tables = $lottery_id == "all" ?  BusinessFlowModel::getAllGameIds() : BusinessFlowModel::getAllGameIdsWithCondition(['game_type' => $lottery_id]);
    // if (empty($all_users) && empty($user)) {
    //     echo json_encode([]);
    // } else {

    //     $users = [];

        // foreach ($all_users as $user) {
        // $users = DataReportModel::filter_fetch_users_for_win_loss_report($all_users, $page);

        // echo json_encode(['response' => computeUserAndSubsStats($users, $bet_tables, $userData), 'numSubs' => $num_subs]);
        // $total_tickets_info   = DataReport::getBetTicketsNumForTeam($all_users, $bet_tables,$userData);
        // echo json_encode($total_tickets_info);
    // }
}else if($flag === "get-all-subs"){

      // get the filter parameters
      $agent_id   = $this->viewData['agent_id'];
      $lottery_id = $this->viewData['lottery_id'];
      $start_date = $this->viewData['start_date'];
      $end_date   = $this->viewData['end_date'];
      $limit      = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 10) : 10;
      
      
      $subs = DataReportModel::allSubs($agent_id);
      
      if(empty($subs)){  empty_response(); return; }
    
      $results = [];
      foreach($subs as $key => $sub){
          $res = DataReportModel::filterWinLossRecordsForUser($sub->uid,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date,]);
          if($res['status'] === "error") continue;
          $res['data']["totalRecords"] = $sub->total_records;
          $data = $res['data'];
          $results[] = $res['data'];
      }
 
      echo json_encode(['status' => "success",'data' => $results]);
  
      return;




}

echo json_encode($results);


function empty_response(){
    echo json_encode(["status"=> "success","data" => []]);
}
function computeUserAndSubsStats($users, $bet_tables, $userData): array
{

    try{
        $results = [];
        
        foreach($users as $data){
            // $total_tickets_info     = DataReportModel::filterGetBetTicketsNum($data->uid, $bet_tables, $userData);
            $total_tickets_info     = count($bet_tables ) !== 1 ?  DataReportModel::v2($data->uid, $bet_tables, $userData) : DataReportModel::filterGetBetTicketsNum($data->uid, $bet_tables, $userData);

            if($total_tickets_info["status"] == "error") return $total_tickets_info;
            $valid_amount_res     = count($bet_tables) !== 1 ? DataReportModel::filter_total_valid_amount_v2($data->uid, $bet_tables, $userData) : DataReportModel::filter_total_valid_amount($data->uid, $bet_tables, $userData);
            if($valid_amount_res["status"] == "error") return $valid_amount_res;
            
            $total_valid_amount = $valid_amount_res["data"];
            $total_tickets_info = $total_tickets_info["data"];
            $reg_type = $data->reg_type;
            $results[]                = ['uid' => $data->uid, 'account_type' => $data->account_type, 'username' => $data->$reg_type, 'num_bet_tickets' => $total_tickets_info['num_bet_tickets'], 'user_rebate' => $data->rebate, 'total_bet_amount' => $total_tickets_info['total_bet_amount'], 'total_rebate_amount' => $total_tickets_info['total_rebate_amount'], 'total_valid_amount' => $total_valid_amount, 'total_win_amount' =>  $total_tickets_info['total_win_amount'], 'win_loss' => DataReportModel::formatNumber(($total_tickets_info['total_rebate_amount'] + $total_valid_amount) - $total_tickets_info['total_win_amount']), 'num_users' => $data->num_users ];
            gc_collect_cycles();
        }
    return ["status"=> "success","data" => $results];
}catch(Exception $e){
    echo $e->getMessage();
    return ["status" => "error", "data" => "Interval Server Error"];
}
}
