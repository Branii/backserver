<?php
set_error_handler(function ($errno, $errstr, $errfile, $errline) {
    // Throw an Exception with the error message and details
    throw new \Exception("$errstr in $errfile on line $errline", $errno);
});
// declare(strict_types=1);
// header('Content-Type: application/json');


$flag  = isset($this->viewData['flag']) ? $this->viewData['flag'] : null;
$page  = isset($this->viewData['page']) ? max((int)$this->viewData['page'], 1) : 1; // Ensure valid page number
// $limit = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 1) : 20; // Ensure valid limit 

$results = [];

if ($flag == "users-win-loss") {

    $partnerID = $this->viewData['partner_id'];
    $lottery_id = $this->viewData['lottery_id'];
    $start_date = $this->viewData['start_date'];
    $end_date   = $this->viewData['end_date'];
    $limit      = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 10) : 10;
    $users_results      = DataReportModel::fetch_users_win_loss_report($partnerID,$page,$limit);
    $bet_tables = $lottery_id == "all" ?  BusinessFlowModel::getAllGameIds($partnerID) : BusinessFlowModel::getAllGameIdsWithCondition(['game_type' => $lottery_id]);
    if($users_results["status"] === "error") {
        echo json_encode($user_results);
        return;
    }
    $users = $users_results["data"];
    $results = computeUserAndSubsStats($partnerID,$users, $bet_tables, ["lottery_id" => $lottery_id, 'datecreated' => $start_date, 'enddate' => $end_date]);
} else if ($flag == "filter-lotteries") {
    $partnerID = $this->viewData['partner_id'];
    $lottery_name = isset($this->viewData['lottery_name']) ? max((int)$this->viewData['lottery_name'], 1) : "";
    if (!empty($lottery_name)) $results = (new DataReportModel())->FiltertLotteryNames($partnerID);
} else if ($flag == 'search-user-win-loss') {
    $partnerID = $this->viewData['partner_id'];
    $user_id    = $this->viewData['user_id'];
    $lottery_id = $this->viewData['lottery_id'];
    $start_date = $this->viewData['start_date'];
    $end_date   = $this->viewData['end_date'];
    if (empty($user_id)) {
        echo json_encode(['error' => "No User Selected."]);
        return true;
    }

    $user_res = DataReportModel::filterWinLossRecordsForUser($partnerID,$user_id,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date]);
    echo json_encode($user_res);

    return ;      
   
} else if ($flag === "get-top-agents") {
  
    // get the filter parameters
    $partnerID = $this->viewData['partner_id'];
    $lottery_id = $this->viewData['lottery_id'];
    $start_date = $this->viewData['start_date'];
    $end_date   = $this->viewData['end_date'];
    $limit      = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 10) : 10;
    

    // fetch the top agents
    $top_agents_results = DataReportModel::fetch_top_agents($partnerID,$page,$limit);


    if($top_agents_results['status'] == "error")  {
        echo json_encode(["status" => "error", "data" => "Internal Server Error." ]); 
        return;
    }
    $top_agents = $top_agents_results['data'];
  
    $results = [];
    foreach($top_agents as $key => $top_agent){
        $res = DataReportModel::filterWinLossRecordsForUser($partnerID,$top_agent->uid,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date,],false,false);
        if($res['status'] === "error") continue;
        $res["data"]["total_records"] = $top_agent->total_records;
        $results[] = $res['data'];
    }
   


    echo json_encode(['status' => "success",'data' => $results]);

    return;
   
} else if ($flag == "get-user-details") {
    $partnerID = $this->viewData['partner_id'];
    $user_id    = $this->viewData['user_id'];
    $lottery_id = $this->viewData['lottery_id'];
    $start_date = $this->viewData['start_date'];
    $end_date   = $this->viewData['end_date'];
    if (empty($user_id)) {
        echo json_encode(['error' => "No User Selected."]);
        return true;
    }
    
    $user_res = DataReportModel::filterWinLossRecordsForUser( $partnerID,$user_id,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date],true);

    echo json_encode($user_res);

    return ;      



} else if ($flag == "get-active-subs") {
     // get the filter parameters
     $partnerID  = $this->viewData['partner_id'];
     $agent_id   = $this->viewData['agent_id'];
     $lottery_id = $this->viewData['lottery_id'];
     $start_date = $this->viewData['start_date'];
     $end_date   = $this->viewData['end_date'];
     $limit      = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 10) : 10;
     

     $subs = DataReportModel::allSubs($partnerID,$agent_id);
     

     if($subs["status"] == "error") return ["status" => "error", "data" => "Internal Server Error."];
     
    //  print_r($subs);
     if(empty($subs["data"])){  echo empty_response(); return; }
    
     $subs = $subs["data"];
     $results = [];
     foreach($subs as $key => $sub){
         $res = DataReportModel::filterWinLossRecordsForUser($partnerID,$sub->uid,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date,]);
         if($res['status'] === "error") continue;
         $res['data']["totalRecords"] = $sub->total_records;
         $data = $res['data'];
         $results[] = $res['data'];
     }

     echo json_encode(['status' => "success",'data' => $results]);
 
     return;

}else if($flag === "get-all-subs"){
      // get the filter parameters
      $partnerID  = $this->viewData['partner_id'];
      $agent_id   = $this->viewData['agent_id'];
      $lottery_id = $this->viewData['lottery_id'];
      $start_date = $this->viewData['start_date'];
      $end_date   = $this->viewData['end_date'];
      $limit      = isset($this->viewData['limit']) ? max((int)$this->viewData['limit'], 10) : 10;
      
      
      $subs = DataReportModel::allSubs($partnerID,$agent_id);
      
      if(empty($subs)){  empty_response(); return; }
    
      $results = [];
      foreach($subs as $key => $sub){
          $res = DataReportModel::filterWinLossRecordsForUser($partnerID,$sub->uid,["game_type"=> $lottery_id,"start_date" => $start_date, "end_date" => $end_date,]);
          if($res['status'] === "error") continue;
          $res['data']["totalRecords"] = $sub->total_records;
          $data = $res['data'];
          $results[] = $res['data'];
      }
 
      echo json_encode(['status' => "success",'data' => $results]);
  
      return;




}

echo json_encode($results);


function empty_response(){
    echo json_encode(["status"=> "success","data" => []]);
}
function computeUserAndSubsStats($partnerID,$users, $bet_tables, $userData): array
{

    try{
        $results = [];
        
        foreach($users as $data){
            // $total_tickets_info     = DataReportModel::filterGetBetTicketsNum($data->uid, $bet_tables, $userData);
            $total_tickets_info     = count($bet_tables ) !== 1 ?  DataReportModel::v2($partnerID,$data->uid, $bet_tables, $userData) : DataReportModel::filterGetBetTicketsNum($partnerID,$data->uid, $bet_tables, $userData);

            if($total_tickets_info["status"] == "error") return $total_tickets_info;
            $valid_amount_res     = count($bet_tables) !== 1 ? DataReportModel::filter_total_valid_amount_v2($partnerID,$data->uid, $bet_tables, $userData) : DataReportModel::filter_total_valid_amount($partnerID,$data->uid, $bet_tables, $userData);
            if($valid_amount_res["status"] == "error") return $valid_amount_res;
            
            $total_valid_amount = $valid_amount_res["data"];
            $total_tickets_info = $total_tickets_info["data"];
            $reg_type = $data->reg_type;
            $results[]                = ['uid' => $data->uid, 'account_type' => $data->account_type, 'username' => $data->$reg_type, 'num_bet_tickets' => $total_tickets_info['num_bet_tickets'], 'user_rebate' => $data->rebate, 'total_bet_amount' => $total_tickets_info['total_bet_amount'], 'total_rebate_amount' => $total_tickets_info['total_rebate_amount'], 'total_valid_amount' => $total_valid_amount, 'total_win_amount' =>  $total_tickets_info['total_win_amount'], 'win_loss' => DataReportModel::formatNumber(($total_tickets_info['total_rebate_amount'] + $total_valid_amount) - $total_tickets_info['total_win_amount']), 'num_users' => $data->num_users ];
            gc_collect_cycles();
        }
    return ["status"=> "success","data" => $results];
}catch(Exception $e){
    echo $e->getMessage();
    return ["status" => "error", "data" => "Interval Server Error"];
}
}
